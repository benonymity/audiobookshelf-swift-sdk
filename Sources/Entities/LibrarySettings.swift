// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct LibrarySettings: Codable {
    /// Whether the library should use square book covers. Must be 0 (for false) or 1 (for true).
    public var coverAspectRatio: Int?
    /// Whether to disable the folder watcher for the library.
    public var isDisableWatcher: Bool?
    /// Whether to skip matching books that already have an ASIN.
    public var isSkipMatchingMediaWithAsin: Bool?
    /// Whether to skip matching books that already have an ISBN.
    public var isSkipMatchingMediaWithIsbn: Bool?
    /// The cron expression for when to automatically scan the library folders. If null, automatic scanning will be disabled.
    public var autoScanCronExpression: String?

    public init(coverAspectRatio: Int? = nil, isDisableWatcher: Bool? = nil, isSkipMatchingMediaWithAsin: Bool? = nil, isSkipMatchingMediaWithIsbn: Bool? = nil, autoScanCronExpression: String? = nil) {
        self.coverAspectRatio = coverAspectRatio
        self.isDisableWatcher = isDisableWatcher
        self.isSkipMatchingMediaWithAsin = isSkipMatchingMediaWithAsin
        self.isSkipMatchingMediaWithIsbn = isSkipMatchingMediaWithIsbn
        self.autoScanCronExpression = autoScanCronExpression
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.coverAspectRatio = try values.decodeIfPresent(Int.self, forKey: "coverAspectRatio")
        self.isDisableWatcher = try values.decodeIfPresent(Bool.self, forKey: "disableWatcher")
        self.isSkipMatchingMediaWithAsin = try values.decodeIfPresent(Bool.self, forKey: "skipMatchingMediaWithAsin")
        self.isSkipMatchingMediaWithIsbn = try values.decodeIfPresent(Bool.self, forKey: "skipMatchingMediaWithIsbn")
        self.autoScanCronExpression = try values.decodeIfPresent(String.self, forKey: "autoScanCronExpression")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(coverAspectRatio, forKey: "coverAspectRatio")
        try values.encodeIfPresent(isDisableWatcher, forKey: "disableWatcher")
        try values.encodeIfPresent(isSkipMatchingMediaWithAsin, forKey: "skipMatchingMediaWithAsin")
        try values.encodeIfPresent(isSkipMatchingMediaWithIsbn, forKey: "skipMatchingMediaWithIsbn")
        try values.encodeIfPresent(autoScanCronExpression, forKey: "autoScanCronExpression")
    }
}
