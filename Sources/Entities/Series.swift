// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct Series: Codable {
    /// The ID of the series.
    public var id: String?
    /// The name of the series.
    public var name: String?
    /// A description for the series. Will be null if there is none.
    public var description: String?
    /// The time (in ms since POSIX epoch) when the series was added.
    public var addedAt: Int?
    /// The time (in ms since POSIX epoch) when the series was last updated.
    public var updatedAt: Int?

    public init(id: String? = nil, name: String? = nil, description: String? = nil, addedAt: Int? = nil, updatedAt: Int? = nil) {
        self.id = id
        self.name = name
        self.description = description
        self.addedAt = addedAt
        self.updatedAt = updatedAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.addedAt = try values.decodeIfPresent(Int.self, forKey: "addedAt")
        self.updatedAt = try values.decodeIfPresent(Int.self, forKey: "updatedAt")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(addedAt, forKey: "addedAt")
        try values.encodeIfPresent(updatedAt, forKey: "updatedAt")
    }
}
