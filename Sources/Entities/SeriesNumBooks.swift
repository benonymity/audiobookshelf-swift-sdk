// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct SeriesNumBooks: Codable {
    /// The ID of the series.
    public var id: String?
    /// The name of the series.
    public var name: String?
    /// The name of the series with any prefix moved to the end.
    public var nameIgnorePrefix: String?
    /// The IDs of the library items in the series.
    public var libraryItemIDs: [String]?
    /// The number of books in the series.
    public var numBooks: Int?

    public init(id: String? = nil, name: String? = nil, nameIgnorePrefix: String? = nil, libraryItemIDs: [String]? = nil, numBooks: Int? = nil) {
        self.id = id
        self.name = name
        self.nameIgnorePrefix = nameIgnorePrefix
        self.libraryItemIDs = libraryItemIDs
        self.numBooks = numBooks
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.nameIgnorePrefix = try values.decodeIfPresent(String.self, forKey: "nameIgnorePrefix")
        self.libraryItemIDs = try values.decodeIfPresent([String].self, forKey: "libraryItemIds")
        self.numBooks = try values.decodeIfPresent(Int.self, forKey: "numBooks")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(nameIgnorePrefix, forKey: "nameIgnorePrefix")
        try values.encodeIfPresent(libraryItemIDs, forKey: "libraryItemIds")
        try values.encodeIfPresent(numBooks, forKey: "numBooks")
    }
}
