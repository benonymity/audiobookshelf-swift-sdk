// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct AudioBookmark: Codable {
    /// The ID of the library item the bookmark is for.
    public var libraryItemID: String?
    /// The title of the bookmark.
    public var title: String?
    /// The time (in seconds) the bookmark is at in the book.
    public var time: Int?
    /// The time (in ms since POSIX epoch) when the bookmark was created.
    public var createdAt: Int?

    public init(libraryItemID: String? = nil, title: String? = nil, time: Int? = nil, createdAt: Int? = nil) {
        self.libraryItemID = libraryItemID
        self.title = title
        self.time = time
        self.createdAt = createdAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.libraryItemID = try values.decodeIfPresent(String.self, forKey: "libraryItemId")
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.time = try values.decodeIfPresent(Int.self, forKey: "time")
        self.createdAt = try values.decodeIfPresent(Int.self, forKey: "createdAt")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(libraryItemID, forKey: "libraryItemId")
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(time, forKey: "time")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
    }
}
