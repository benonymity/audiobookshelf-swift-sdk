// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct Playlist: Codable {
    /// The ID of the playlist.
    public var id: String?
    /// The ID of the library the playlist belongs to.
    public var libraryID: String?
    /// The ID of the user the playlist belongs to.
    public var userID: String?
    /// The playlist's name.
    public var name: String?
    /// The playlist's description.
    public var description: String?
    /// The path of the playlist's cover.
    public var coverPath: String?
    /// The items in the playlist.
    public var items: [PlaylistItem]?
    /// The time (in ms since POSIX epoch) when the playlist was last updated.
    public var lastUpdate: Int?
    /// The time (in ms since POSIX epoch) when the playlist was created.
    public var createdAt: Int?

    public init(id: String? = nil, libraryID: String? = nil, userID: String? = nil, name: String? = nil, description: String? = nil, coverPath: String? = nil, items: [PlaylistItem]? = nil, lastUpdate: Int? = nil, createdAt: Int? = nil) {
        self.id = id
        self.libraryID = libraryID
        self.userID = userID
        self.name = name
        self.description = description
        self.coverPath = coverPath
        self.items = items
        self.lastUpdate = lastUpdate
        self.createdAt = createdAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.libraryID = try values.decodeIfPresent(String.self, forKey: "libraryId")
        self.userID = try values.decodeIfPresent(String.self, forKey: "userId")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.coverPath = try values.decodeIfPresent(String.self, forKey: "coverPath")
        self.items = try values.decodeIfPresent([PlaylistItem].self, forKey: "items")
        self.lastUpdate = try values.decodeIfPresent(Int.self, forKey: "lastUpdate")
        self.createdAt = try values.decodeIfPresent(Int.self, forKey: "createdAt")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(libraryID, forKey: "libraryId")
        try values.encodeIfPresent(userID, forKey: "userId")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(coverPath, forKey: "coverPath")
        try values.encodeIfPresent(items, forKey: "items")
        try values.encodeIfPresent(lastUpdate, forKey: "lastUpdate")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
    }
}
