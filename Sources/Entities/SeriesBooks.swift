// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct SeriesBooks: Codable {
    /// The ID of the series.
    public var id: String?
    /// The name of the series.
    public var name: String?
    /// The name of the series with any prefix moved to the end.
    public var nameIgnorePrefix: String?
    /// The name of the series with any prefix removed.
    public var nameIgnorePrefixSort: String?
    /// Will always be series.
    public var type: String?
    /// The library items that contain the books in the series. A sequence attribute that denotes the position in the series the book is in, is tacked on.
    public var books: [LibraryItem]?
    /// The time (in ms since POSIX epoch) when the series was added.
    public var addedAt: Int?
    /// The combined duration (in seconds) of all books in the series.
    public var totalDuration: Double?

    public init(id: String? = nil, name: String? = nil, nameIgnorePrefix: String? = nil, nameIgnorePrefixSort: String? = nil, type: String? = nil, books: [LibraryItem]? = nil, addedAt: Int? = nil, totalDuration: Double? = nil) {
        self.id = id
        self.name = name
        self.nameIgnorePrefix = nameIgnorePrefix
        self.nameIgnorePrefixSort = nameIgnorePrefixSort
        self.type = type
        self.books = books
        self.addedAt = addedAt
        self.totalDuration = totalDuration
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.nameIgnorePrefix = try values.decodeIfPresent(String.self, forKey: "nameIgnorePrefix")
        self.nameIgnorePrefixSort = try values.decodeIfPresent(String.self, forKey: "nameIgnorePrefixSort")
        self.type = try values.decodeIfPresent(String.self, forKey: "type")
        self.books = try values.decodeIfPresent([LibraryItem].self, forKey: "books")
        self.addedAt = try values.decodeIfPresent(Int.self, forKey: "addedAt")
        self.totalDuration = try values.decodeIfPresent(Double.self, forKey: "totalDuration")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(nameIgnorePrefix, forKey: "nameIgnorePrefix")
        try values.encodeIfPresent(nameIgnorePrefixSort, forKey: "nameIgnorePrefixSort")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(books, forKey: "books")
        try values.encodeIfPresent(addedAt, forKey: "addedAt")
        try values.encodeIfPresent(totalDuration, forKey: "totalDuration")
    }
}
