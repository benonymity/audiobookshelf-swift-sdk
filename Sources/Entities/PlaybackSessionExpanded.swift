// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct PlaybackSessionExpanded: Codable {
    /// The ID of the playback session.
    public var id: String?
    /// The ID of the user the playback session is for.
    public var userID: String?
    /// The ID of the library that contains the library item.
    public var libraryID: String?
    /// The ID of the library item.
    public var libraryItemID: String?
    /// The ID of the podcast episode. Will be null if this playback session was started without an episode ID.
    public var episodeID: String?
    /// The media type of the library item. Will be book or podcast.
    public var mediaType: String?
    /// The metadata of the library item's media.
    public var mediaMetadata: [String: MediaMetadatum]?
    /// If the library item is a book, the chapters it contains.
    public var chapters: [BookChapter]?
    /// The title of the playing item to show to the user.
    public var displayTitle: String?
    /// The author of the playing item to show to the user.
    public var displayAuthor: String?
    /// The cover path of the library item's media.
    public var coverPath: String?
    /// The total duration (in seconds) of the playing item.
    public var duration: Double?
    /// What play method the playback session is using. See below for values.
    public var playMethod: Int?
    /// The given media player when the playback session was requested.
    public var mediaPlayer: String?
    public var deviceInfo: DeviceInfo?
    /// The server version the playback session was started with.
    public var serverVersion: String?
    /// The day (in the format YYYY-MM-DD) the playback session was started.
    public var date: NaiveDate?
    /// The day of the week the playback session was started.
    public var dayOfWeek: String?
    /// The amount of time (in seconds) the user has spent listening using this playback session.
    public var timeListening: Double?
    /// The time (in seconds) where the playback session started.
    public var startTime: Double?
    /// The current time (in seconds) of the playback position.
    public var currentTime: Double?
    /// The time (in ms since POSIX epoch) when the playback session was started.
    public var startedAt: Int?
    /// The time (in ms since POSIX epoch) when the playback session was last updated.
    public var updatedAt: Int?
    /// The audio tracks that are being played with the playback session.
    public var audioTracks: [AudioFile]?
    /// The video track that is being played with the playback session. Will be null if the playback session is for a book or podcast. (Video Track Object does not exist)
    public var videoTrack: String?
    public var libraryItem: LibraryItemExpanded?

    public enum MediaMetadatum: Codable {
        case bookMetadata(BookMetadata)
        case podcastMetadata(PodcastMetadata)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(BookMetadata.self) {
                self = .bookMetadata(value)
            } else if let value = try? container.decode(PodcastMetadata.self) {
                self = .podcastMetadata(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (BookMetadata, PodcastMetadata)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .bookMetadata(let value): try container.encode(value)
            case .podcastMetadata(let value): try container.encode(value)
            }
        }
    }

    public init(id: String? = nil, userID: String? = nil, libraryID: String? = nil, libraryItemID: String? = nil, episodeID: String? = nil, mediaType: String? = nil, mediaMetadata: [String: MediaMetadatum]? = nil, chapters: [BookChapter]? = nil, displayTitle: String? = nil, displayAuthor: String? = nil, coverPath: String? = nil, duration: Double? = nil, playMethod: Int? = nil, mediaPlayer: String? = nil, deviceInfo: DeviceInfo? = nil, serverVersion: String? = nil, date: NaiveDate? = nil, dayOfWeek: String? = nil, timeListening: Double? = nil, startTime: Double? = nil, currentTime: Double? = nil, startedAt: Int? = nil, updatedAt: Int? = nil, audioTracks: [AudioFile]? = nil, videoTrack: String? = nil, libraryItem: LibraryItemExpanded? = nil) {
        self.id = id
        self.userID = userID
        self.libraryID = libraryID
        self.libraryItemID = libraryItemID
        self.episodeID = episodeID
        self.mediaType = mediaType
        self.mediaMetadata = mediaMetadata
        self.chapters = chapters
        self.displayTitle = displayTitle
        self.displayAuthor = displayAuthor
        self.coverPath = coverPath
        self.duration = duration
        self.playMethod = playMethod
        self.mediaPlayer = mediaPlayer
        self.deviceInfo = deviceInfo
        self.serverVersion = serverVersion
        self.date = date
        self.dayOfWeek = dayOfWeek
        self.timeListening = timeListening
        self.startTime = startTime
        self.currentTime = currentTime
        self.startedAt = startedAt
        self.updatedAt = updatedAt
        self.audioTracks = audioTracks
        self.videoTrack = videoTrack
        self.libraryItem = libraryItem
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.userID = try values.decodeIfPresent(String.self, forKey: "userId")
        self.libraryID = try values.decodeIfPresent(String.self, forKey: "libraryId")
        self.libraryItemID = try values.decodeIfPresent(String.self, forKey: "libraryItemId")
        self.episodeID = try values.decodeIfPresent(String.self, forKey: "episodeId")
        self.mediaType = try values.decodeIfPresent(String.self, forKey: "mediaType")
        self.mediaMetadata = try values.decodeIfPresent([String: MediaMetadatum].self, forKey: "mediaMetadata")
        self.chapters = try values.decodeIfPresent([BookChapter].self, forKey: "chapters")
        self.displayTitle = try values.decodeIfPresent(String.self, forKey: "displayTitle")
        self.displayAuthor = try values.decodeIfPresent(String.self, forKey: "displayAuthor")
        self.coverPath = try values.decodeIfPresent(String.self, forKey: "coverPath")
        self.duration = try values.decodeIfPresent(Double.self, forKey: "duration")
        self.playMethod = try values.decodeIfPresent(Int.self, forKey: "playMethod")
        self.mediaPlayer = try values.decodeIfPresent(String.self, forKey: "mediaPlayer")
        self.deviceInfo = try values.decodeIfPresent(DeviceInfo.self, forKey: "deviceInfo")
        self.serverVersion = try values.decodeIfPresent(String.self, forKey: "serverVersion")
        self.date = try values.decodeIfPresent(NaiveDate.self, forKey: "date")
        self.dayOfWeek = try values.decodeIfPresent(String.self, forKey: "dayOfWeek")
        self.timeListening = try values.decodeIfPresent(Double.self, forKey: "timeListening")
        self.startTime = try values.decodeIfPresent(Double.self, forKey: "startTime")
        self.currentTime = try values.decodeIfPresent(Double.self, forKey: "currentTime")
        self.startedAt = try values.decodeIfPresent(Int.self, forKey: "startedAt")
        self.updatedAt = try values.decodeIfPresent(Int.self, forKey: "updatedAt")
        self.audioTracks = try values.decodeIfPresent([AudioFile].self, forKey: "audioTracks")
        self.videoTrack = try values.decodeIfPresent(String.self, forKey: "videoTrack")
        self.libraryItem = try values.decodeIfPresent(LibraryItemExpanded.self, forKey: "libraryItem")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(userID, forKey: "userId")
        try values.encodeIfPresent(libraryID, forKey: "libraryId")
        try values.encodeIfPresent(libraryItemID, forKey: "libraryItemId")
        try values.encodeIfPresent(episodeID, forKey: "episodeId")
        try values.encodeIfPresent(mediaType, forKey: "mediaType")
        try values.encodeIfPresent(mediaMetadata, forKey: "mediaMetadata")
        try values.encodeIfPresent(chapters, forKey: "chapters")
        try values.encodeIfPresent(displayTitle, forKey: "displayTitle")
        try values.encodeIfPresent(displayAuthor, forKey: "displayAuthor")
        try values.encodeIfPresent(coverPath, forKey: "coverPath")
        try values.encodeIfPresent(duration, forKey: "duration")
        try values.encodeIfPresent(playMethod, forKey: "playMethod")
        try values.encodeIfPresent(mediaPlayer, forKey: "mediaPlayer")
        try values.encodeIfPresent(deviceInfo, forKey: "deviceInfo")
        try values.encodeIfPresent(serverVersion, forKey: "serverVersion")
        try values.encodeIfPresent(date, forKey: "date")
        try values.encodeIfPresent(dayOfWeek, forKey: "dayOfWeek")
        try values.encodeIfPresent(timeListening, forKey: "timeListening")
        try values.encodeIfPresent(startTime, forKey: "startTime")
        try values.encodeIfPresent(currentTime, forKey: "currentTime")
        try values.encodeIfPresent(startedAt, forKey: "startedAt")
        try values.encodeIfPresent(updatedAt, forKey: "updatedAt")
        try values.encodeIfPresent(audioTracks, forKey: "audioTracks")
        try values.encodeIfPresent(videoTrack, forKey: "videoTrack")
        try values.encodeIfPresent(libraryItem, forKey: "libraryItem")
    }
}
