// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct PlaylistItemExpanded: Codable {
    /// The ID of the library item the playlist item is for.
    public var libraryItemID: String?
    /// The ID of the podcast episode the playlist item is for.
    public var episodeID: String?
    public var episode: PodcastEpisodeExpanded?
    /// The library item the playlist item is for. Will be Library Item Minified if episodeId is not null.
    public var libraryItem: [String: LibraryItemItem]?

    public enum LibraryItemItem: Codable {
        case libraryItemMinified(LibraryItemMinified)
        case libraryItemExpanded(LibraryItemExpanded)

        public init(from decoder: Decoder) throws {
            let container = try decoder.singleValueContainer()
            if let value = try? container.decode(LibraryItemMinified.self) {
                self = .libraryItemMinified(value)
            } else if let value = try? container.decode(LibraryItemExpanded.self) {
                self = .libraryItemExpanded(value)
            } else {
                throw DecodingError.dataCorruptedError(
                    in: container,
                    debugDescription: "Data could not be decoded as any of the expected types (LibraryItemMinified, LibraryItemExpanded)."
                )
            }
        }

        public func encode(to encoder: Encoder) throws {
            var container = encoder.singleValueContainer()
            switch self {
            case .libraryItemMinified(let value): try container.encode(value)
            case .libraryItemExpanded(let value): try container.encode(value)
            }
        }
    }

    public init(libraryItemID: String? = nil, episodeID: String? = nil, episode: PodcastEpisodeExpanded? = nil, libraryItem: [String: LibraryItemItem]? = nil) {
        self.libraryItemID = libraryItemID
        self.episodeID = episodeID
        self.episode = episode
        self.libraryItem = libraryItem
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.libraryItemID = try values.decodeIfPresent(String.self, forKey: "libraryItemId")
        self.episodeID = try values.decodeIfPresent(String.self, forKey: "episodeId")
        self.episode = try values.decodeIfPresent(PodcastEpisodeExpanded.self, forKey: "episode")
        self.libraryItem = try values.decodeIfPresent([String: LibraryItemItem].self, forKey: "libraryItem")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(libraryItemID, forKey: "libraryItemId")
        try values.encodeIfPresent(episodeID, forKey: "episodeId")
        try values.encodeIfPresent(episode, forKey: "episode")
        try values.encodeIfPresent(libraryItem, forKey: "libraryItem")
    }
}
