// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct RssFeedMetadataMinified: Codable {
    /// The title of the entity the RSS feed is for.
    public var title: String?
    /// The description of the entity the RSS feed is for.
    public var description: String?
    /// Whether the RSS feed is marked to prevent indexing of the feed.
    public var isPreventIndexing: Bool?
    /// The owner name of the RSS feed.
    public var ownerName: String?
    /// The owner email of the RSS feed.
    public var ownerEmail: String?

    public init(title: String? = nil, description: String? = nil, isPreventIndexing: Bool? = nil, ownerName: String? = nil, ownerEmail: String? = nil) {
        self.title = title
        self.description = description
        self.isPreventIndexing = isPreventIndexing
        self.ownerName = ownerName
        self.ownerEmail = ownerEmail
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.isPreventIndexing = try values.decodeIfPresent(Bool.self, forKey: "preventIndexing")
        self.ownerName = try values.decodeIfPresent(String.self, forKey: "ownerName")
        self.ownerEmail = try values.decodeIfPresent(String.self, forKey: "ownerEmail")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(isPreventIndexing, forKey: "preventIndexing")
        try values.encodeIfPresent(ownerName, forKey: "ownerName")
        try values.encodeIfPresent(ownerEmail, forKey: "ownerEmail")
    }
}
