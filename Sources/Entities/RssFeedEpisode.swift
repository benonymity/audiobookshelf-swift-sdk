// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct RssFeedEpisode: Codable {
    /// The ID of the RSS feed episode.
    public var id: String?
    /// The title of the RSS feed episode.
    public var title: String?
    /// An HTML encoded description of the RSS feed episode.
    public var description: String?
    /// Download information for the RSS feed episode. (Similar to Podcast Episode Enclosure)
    public var enclosure: Enclosure?
    /// The RSS feed episode's publication date.
    public var pubDate: String?
    /// A URL to display to the RSS feed user.
    public var link: String?
    /// The author of the RSS feed episode.
    public var author: String?
    /// Whether the RSS feed episode is explicit.
    public var isExplicit: Bool?
    /// The duration (in seconds) of the RSS feed episode.
    public var duration: Double?
    /// The season of the RSS feed episode.
    public var season: String?
    /// The episode number of the RSS feed episode.
    public var episode: String?
    /// The type of the RSS feed episode.
    public var episodeType: String?
    /// The ID of the library item the RSS feed is for.
    public var libraryItemID: String?
    /// The ID of the podcast episode the RSS feed episode is for. Will be null if the RSS feed is for a book.
    public var episodeID: String?
    /// The RSS feed episode's track index.
    public var trackIndex: Int?
    /// The path on the server of the audio file the RSS feed episode is for.
    public var fullPath: String?

    /// Download information for the RSS feed episode. (Similar to Podcast Episode Enclosure)
    public struct Enclosure: Codable {
        public var url: String?
        public var type: String?
        public var size: Int?

        public init(url: String? = nil, type: String? = nil, size: Int? = nil) {
            self.url = url
            self.type = type
            self.size = size
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.url = try values.decodeIfPresent(String.self, forKey: "url")
            self.type = try values.decodeIfPresent(String.self, forKey: "type")
            self.size = try values.decodeIfPresent(Int.self, forKey: "size")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(url, forKey: "url")
            try values.encodeIfPresent(type, forKey: "type")
            try values.encodeIfPresent(size, forKey: "size")
        }
    }

    public init(id: String? = nil, title: String? = nil, description: String? = nil, enclosure: Enclosure? = nil, pubDate: String? = nil, link: String? = nil, author: String? = nil, isExplicit: Bool? = nil, duration: Double? = nil, season: String? = nil, episode: String? = nil, episodeType: String? = nil, libraryItemID: String? = nil, episodeID: String? = nil, trackIndex: Int? = nil, fullPath: String? = nil) {
        self.id = id
        self.title = title
        self.description = description
        self.enclosure = enclosure
        self.pubDate = pubDate
        self.link = link
        self.author = author
        self.isExplicit = isExplicit
        self.duration = duration
        self.season = season
        self.episode = episode
        self.episodeType = episodeType
        self.libraryItemID = libraryItemID
        self.episodeID = episodeID
        self.trackIndex = trackIndex
        self.fullPath = fullPath
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.enclosure = try values.decodeIfPresent(Enclosure.self, forKey: "enclosure")
        self.pubDate = try values.decodeIfPresent(String.self, forKey: "pubDate")
        self.link = try values.decodeIfPresent(String.self, forKey: "link")
        self.author = try values.decodeIfPresent(String.self, forKey: "author")
        self.isExplicit = try values.decodeIfPresent(Bool.self, forKey: "explicit")
        self.duration = try values.decodeIfPresent(Double.self, forKey: "duration")
        self.season = try values.decodeIfPresent(String.self, forKey: "season")
        self.episode = try values.decodeIfPresent(String.self, forKey: "episode")
        self.episodeType = try values.decodeIfPresent(String.self, forKey: "episodeType")
        self.libraryItemID = try values.decodeIfPresent(String.self, forKey: "libraryItemId")
        self.episodeID = try values.decodeIfPresent(String.self, forKey: "episodeId")
        self.trackIndex = try values.decodeIfPresent(Int.self, forKey: "trackIndex")
        self.fullPath = try values.decodeIfPresent(String.self, forKey: "fullPath")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(enclosure, forKey: "enclosure")
        try values.encodeIfPresent(pubDate, forKey: "pubDate")
        try values.encodeIfPresent(link, forKey: "link")
        try values.encodeIfPresent(author, forKey: "author")
        try values.encodeIfPresent(isExplicit, forKey: "explicit")
        try values.encodeIfPresent(duration, forKey: "duration")
        try values.encodeIfPresent(season, forKey: "season")
        try values.encodeIfPresent(episode, forKey: "episode")
        try values.encodeIfPresent(episodeType, forKey: "episodeType")
        try values.encodeIfPresent(libraryItemID, forKey: "libraryItemId")
        try values.encodeIfPresent(episodeID, forKey: "episodeId")
        try values.encodeIfPresent(trackIndex, forKey: "trackIndex")
        try values.encodeIfPresent(fullPath, forKey: "fullPath")
    }
}
