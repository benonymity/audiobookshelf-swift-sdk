// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct Stream: Codable {
    /// The ID of the stream. It will be the same as the ID of the playback session that the stream is for.
    public var id: String?
    /// The ID of the user that started the stream.
    public var userID: String?
    public var libraryItem: LibraryItemExpanded?
    public var episode: PodcastEpisodeExpanded?
    /// The length (in seconds) of each segment of the stream.
    public var segmentLength: Int?
    /// The path on the server of the stream output.
    public var playlistPath: String?
    /// The URI path for the client to access the stream.
    public var clientPlaylistUri: String?
    /// The time (in seconds) where the playback session started.
    public var startTime: Int?
    /// The segment where the transcoding began.
    public var segmentStartNumber: Int?
    /// Whether transcoding is complete.
    public var isTranscodeComplete: Bool?

    public init(id: String? = nil, userID: String? = nil, libraryItem: LibraryItemExpanded? = nil, episode: PodcastEpisodeExpanded? = nil, segmentLength: Int? = nil, playlistPath: String? = nil, clientPlaylistUri: String? = nil, startTime: Int? = nil, segmentStartNumber: Int? = nil, isTranscodeComplete: Bool? = nil) {
        self.id = id
        self.userID = userID
        self.libraryItem = libraryItem
        self.episode = episode
        self.segmentLength = segmentLength
        self.playlistPath = playlistPath
        self.clientPlaylistUri = clientPlaylistUri
        self.startTime = startTime
        self.segmentStartNumber = segmentStartNumber
        self.isTranscodeComplete = isTranscodeComplete
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.userID = try values.decodeIfPresent(String.self, forKey: "userId")
        self.libraryItem = try values.decodeIfPresent(LibraryItemExpanded.self, forKey: "libraryItem")
        self.episode = try values.decodeIfPresent(PodcastEpisodeExpanded.self, forKey: "episode")
        self.segmentLength = try values.decodeIfPresent(Int.self, forKey: "segmentLength")
        self.playlistPath = try values.decodeIfPresent(String.self, forKey: "playlistPath")
        self.clientPlaylistUri = try values.decodeIfPresent(String.self, forKey: "clientPlaylistUri")
        self.startTime = try values.decodeIfPresent(Int.self, forKey: "startTime")
        self.segmentStartNumber = try values.decodeIfPresent(Int.self, forKey: "segmentStartNumber")
        self.isTranscodeComplete = try values.decodeIfPresent(Bool.self, forKey: "isTranscodeComplete")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(userID, forKey: "userId")
        try values.encodeIfPresent(libraryItem, forKey: "libraryItem")
        try values.encodeIfPresent(episode, forKey: "episode")
        try values.encodeIfPresent(segmentLength, forKey: "segmentLength")
        try values.encodeIfPresent(playlistPath, forKey: "playlistPath")
        try values.encodeIfPresent(clientPlaylistUri, forKey: "clientPlaylistUri")
        try values.encodeIfPresent(startTime, forKey: "startTime")
        try values.encodeIfPresent(segmentStartNumber, forKey: "segmentStartNumber")
        try values.encodeIfPresent(isTranscodeComplete, forKey: "isTranscodeComplete")
    }
}
