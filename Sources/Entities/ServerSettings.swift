// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct ServerSettings: Codable {
    /// The ID of the server settings.
    public var id: String?
    /// Whether the scanner will attempt to find a cover if your audiobook does not have an embedded cover or a cover image inside the folder. Note that This will extend scan time.
    public var isScannerFindCovers: Bool?
    /// If scannerFindCovers is true, which metadata provider to use. See Metadata Providers for options.
    public var scannerCoverProvider: String?
    /// Whether to extract subtitles from audiobook folder names. Subtitles must be separated by -, i.e. /audiobooks/Book Title - A Subtitle Here/ has the subtitle A Subtitle Here.
    public var isScannerParseSubtitle: Bool?
    /// Whether to use audio file ID3 meta tags instead of folder names for book details.
    public var isScannerPreferAudioMetadata: Bool?
    /// Whether to use OPF file metadata instead of folder names for book details.
    public var isScannerPreferOpfMetadata: Bool?
    /// Whether matched data will override item details when using Quick Match. By default, Quick Match will only fill in missing details.
    public var isScannerPreferMatchedMetadata: Bool?
    /// Whether to disable the automatic adding/updating of items when file changes are detected. Requires server restart for changes to take effect.
    public var isScannerDisableWatcher: Bool?
    /// Whether to use the custom metadata in MP3 files from Overdrive for chapter timings automatically.
    public var isScannerPreferOverdriveMediaMarker: Bool?
    public var scannerUseTone: Bool?
    /// Whether to store covers in the library item's folder. By default, covers are stored in /metadata/items. Only one file named cover will be kept.
    public var isStoreCoverWithItem: Bool?
    /// Whether to store metadata files in the library item's folder. By default, metadata files are stored in /metadata/items. Uses the .abs file extension.
    public var isStoreMetadataWithItem: Bool?
    /// Must be either json or abs
    public var metadataFileFormat: String?
    /// The maximum number of login requests per rateLimitLoginWindow.
    public var rateLimitLoginRequests: Int?
    /// The length (in ms) of each login rate limit window.
    public var rateLimitLoginWindow: Int?
    /// The cron expression for when to do automatic backups.
    public var backupSchedule: String?
    /// The number of backups to keep.
    public var backupsToKeep: Int?
    /// The maximum backup size (in GB) before they fail, a safeguard against misconfiguration.
    public var maxBackupSize: Int?
    /// Whether backups should include library item covers and author images located in metadata.
    public var isBackupMetadataCovers: Bool?
    /// The number of daily logs to keep.
    public var loggerDailyLogsToKeep: Int?
    /// The number of scanner logs to keep.
    public var loggerScannerLogsToKeep: Int?
    /// Whether the home page should use a skeuomorphic design with wooden shelves.
    public var homeBookshelfView: String?
    /// Whether other bookshelf pages should use a skeuomorphic design with wooden shelves.
    public var bookshelfView: String?
    /// Whether to ignore prefixes when sorting. For example, for the prefix the, the book title The Book Title would sort as Book Title, The.
    public var isSortingIgnorePrefix: Bool?
    /// If sortingIgnorePrefix is true, what prefixes to ignore.
    public var sortingPrefixes: [String]?
    /// Whether to enable streaming to Chromecast devices.
    public var isChromecastEnabled: Bool?
    /// What date format to use. Options are MM/dd/yyyy, dd/MM/yyyy, dd.MM.yyyy, yyyy-MM-dd, MMM do, yyyy, MMMM do, yyyy, dd MMM yyyy, or dd MMMM yyyy.
    public var dateFormat: String?
    /// What time format to use. Options are HH:mm (24-hour) and h:mma (am/pm).
    public var timeFormat: String?
    /// The default server language.
    public var language: String?
    /// What log level the server should use when logging. 1 for debug, 2 for info, or 3 for warnings.
    public var logLevel: Int?
    /// The server's version.
    public var version: String?

    public init(id: String? = nil, isScannerFindCovers: Bool? = nil, scannerCoverProvider: String? = nil, isScannerParseSubtitle: Bool? = nil, isScannerPreferAudioMetadata: Bool? = nil, isScannerPreferOpfMetadata: Bool? = nil, isScannerPreferMatchedMetadata: Bool? = nil, isScannerDisableWatcher: Bool? = nil, isScannerPreferOverdriveMediaMarker: Bool? = nil, scannerUseTone: Bool? = nil, isStoreCoverWithItem: Bool? = nil, isStoreMetadataWithItem: Bool? = nil, metadataFileFormat: String? = nil, rateLimitLoginRequests: Int? = nil, rateLimitLoginWindow: Int? = nil, backupSchedule: String? = nil, backupsToKeep: Int? = nil, maxBackupSize: Int? = nil, isBackupMetadataCovers: Bool? = nil, loggerDailyLogsToKeep: Int? = nil, loggerScannerLogsToKeep: Int? = nil, homeBookshelfView: String? = nil, bookshelfView: String? = nil, isSortingIgnorePrefix: Bool? = nil, sortingPrefixes: [String]? = nil, isChromecastEnabled: Bool? = nil, dateFormat: String? = nil, timeFormat: String? = nil, language: String? = nil, logLevel: Int? = nil, version: String? = nil) {
        self.id = id
        self.isScannerFindCovers = isScannerFindCovers
        self.scannerCoverProvider = scannerCoverProvider
        self.isScannerParseSubtitle = isScannerParseSubtitle
        self.isScannerPreferAudioMetadata = isScannerPreferAudioMetadata
        self.isScannerPreferOpfMetadata = isScannerPreferOpfMetadata
        self.isScannerPreferMatchedMetadata = isScannerPreferMatchedMetadata
        self.isScannerDisableWatcher = isScannerDisableWatcher
        self.isScannerPreferOverdriveMediaMarker = isScannerPreferOverdriveMediaMarker
        self.scannerUseTone = scannerUseTone
        self.isStoreCoverWithItem = isStoreCoverWithItem
        self.isStoreMetadataWithItem = isStoreMetadataWithItem
        self.metadataFileFormat = metadataFileFormat
        self.rateLimitLoginRequests = rateLimitLoginRequests
        self.rateLimitLoginWindow = rateLimitLoginWindow
        self.backupSchedule = backupSchedule
        self.backupsToKeep = backupsToKeep
        self.maxBackupSize = maxBackupSize
        self.isBackupMetadataCovers = isBackupMetadataCovers
        self.loggerDailyLogsToKeep = loggerDailyLogsToKeep
        self.loggerScannerLogsToKeep = loggerScannerLogsToKeep
        self.homeBookshelfView = homeBookshelfView
        self.bookshelfView = bookshelfView
        self.isSortingIgnorePrefix = isSortingIgnorePrefix
        self.sortingPrefixes = sortingPrefixes
        self.isChromecastEnabled = isChromecastEnabled
        self.dateFormat = dateFormat
        self.timeFormat = timeFormat
        self.language = language
        self.logLevel = logLevel
        self.version = version
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.isScannerFindCovers = try values.decodeIfPresent(Bool.self, forKey: "scannerFindCovers")
        self.scannerCoverProvider = try values.decodeIfPresent(String.self, forKey: "scannerCoverProvider")
        self.isScannerParseSubtitle = try values.decodeIfPresent(Bool.self, forKey: "scannerParseSubtitle")
        self.isScannerPreferAudioMetadata = try values.decodeIfPresent(Bool.self, forKey: "scannerPreferAudioMetadata")
        self.isScannerPreferOpfMetadata = try values.decodeIfPresent(Bool.self, forKey: "scannerPreferOpfMetadata")
        self.isScannerPreferMatchedMetadata = try values.decodeIfPresent(Bool.self, forKey: "scannerPreferMatchedMetadata")
        self.isScannerDisableWatcher = try values.decodeIfPresent(Bool.self, forKey: "scannerDisableWatcher")
        self.isScannerPreferOverdriveMediaMarker = try values.decodeIfPresent(Bool.self, forKey: "scannerPreferOverdriveMediaMarker")
        self.scannerUseTone = try values.decodeIfPresent(Bool.self, forKey: "scannerUseTone")
        self.isStoreCoverWithItem = try values.decodeIfPresent(Bool.self, forKey: "storeCoverWithItem")
        self.isStoreMetadataWithItem = try values.decodeIfPresent(Bool.self, forKey: "storeMetadataWithItem")
        self.metadataFileFormat = try values.decodeIfPresent(String.self, forKey: "metadataFileFormat")
        self.rateLimitLoginRequests = try values.decodeIfPresent(Int.self, forKey: "rateLimitLoginRequests")
        self.rateLimitLoginWindow = try values.decodeIfPresent(Int.self, forKey: "rateLimitLoginWindow")
        self.backupSchedule = try values.decodeIfPresent(String.self, forKey: "backupSchedule")
        self.backupsToKeep = try values.decodeIfPresent(Int.self, forKey: "backupsToKeep")
        self.maxBackupSize = try values.decodeIfPresent(Int.self, forKey: "maxBackupSize")
        self.isBackupMetadataCovers = try values.decodeIfPresent(Bool.self, forKey: "backupMetadataCovers")
        self.loggerDailyLogsToKeep = try values.decodeIfPresent(Int.self, forKey: "loggerDailyLogsToKeep")
        self.loggerScannerLogsToKeep = try values.decodeIfPresent(Int.self, forKey: "loggerScannerLogsToKeep")
        self.homeBookshelfView = try values.decodeIfPresent(String.self, forKey: "homeBookshelfView")
        self.bookshelfView = try values.decodeIfPresent(String.self, forKey: "bookshelfView")
        self.isSortingIgnorePrefix = try values.decodeIfPresent(Bool.self, forKey: "sortingIgnorePrefix")
        self.sortingPrefixes = try values.decodeIfPresent([String].self, forKey: "sortingPrefixes")
        self.isChromecastEnabled = try values.decodeIfPresent(Bool.self, forKey: "chromecastEnabled")
        self.dateFormat = try values.decodeIfPresent(String.self, forKey: "dateFormat")
        self.timeFormat = try values.decodeIfPresent(String.self, forKey: "timeFormat")
        self.language = try values.decodeIfPresent(String.self, forKey: "language")
        self.logLevel = try values.decodeIfPresent(Int.self, forKey: "logLevel")
        self.version = try values.decodeIfPresent(String.self, forKey: "version")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(isScannerFindCovers, forKey: "scannerFindCovers")
        try values.encodeIfPresent(scannerCoverProvider, forKey: "scannerCoverProvider")
        try values.encodeIfPresent(isScannerParseSubtitle, forKey: "scannerParseSubtitle")
        try values.encodeIfPresent(isScannerPreferAudioMetadata, forKey: "scannerPreferAudioMetadata")
        try values.encodeIfPresent(isScannerPreferOpfMetadata, forKey: "scannerPreferOpfMetadata")
        try values.encodeIfPresent(isScannerPreferMatchedMetadata, forKey: "scannerPreferMatchedMetadata")
        try values.encodeIfPresent(isScannerDisableWatcher, forKey: "scannerDisableWatcher")
        try values.encodeIfPresent(isScannerPreferOverdriveMediaMarker, forKey: "scannerPreferOverdriveMediaMarker")
        try values.encodeIfPresent(scannerUseTone, forKey: "scannerUseTone")
        try values.encodeIfPresent(isStoreCoverWithItem, forKey: "storeCoverWithItem")
        try values.encodeIfPresent(isStoreMetadataWithItem, forKey: "storeMetadataWithItem")
        try values.encodeIfPresent(metadataFileFormat, forKey: "metadataFileFormat")
        try values.encodeIfPresent(rateLimitLoginRequests, forKey: "rateLimitLoginRequests")
        try values.encodeIfPresent(rateLimitLoginWindow, forKey: "rateLimitLoginWindow")
        try values.encodeIfPresent(backupSchedule, forKey: "backupSchedule")
        try values.encodeIfPresent(backupsToKeep, forKey: "backupsToKeep")
        try values.encodeIfPresent(maxBackupSize, forKey: "maxBackupSize")
        try values.encodeIfPresent(isBackupMetadataCovers, forKey: "backupMetadataCovers")
        try values.encodeIfPresent(loggerDailyLogsToKeep, forKey: "loggerDailyLogsToKeep")
        try values.encodeIfPresent(loggerScannerLogsToKeep, forKey: "loggerScannerLogsToKeep")
        try values.encodeIfPresent(homeBookshelfView, forKey: "homeBookshelfView")
        try values.encodeIfPresent(bookshelfView, forKey: "bookshelfView")
        try values.encodeIfPresent(isSortingIgnorePrefix, forKey: "sortingIgnorePrefix")
        try values.encodeIfPresent(sortingPrefixes, forKey: "sortingPrefixes")
        try values.encodeIfPresent(isChromecastEnabled, forKey: "chromecastEnabled")
        try values.encodeIfPresent(dateFormat, forKey: "dateFormat")
        try values.encodeIfPresent(timeFormat, forKey: "timeFormat")
        try values.encodeIfPresent(language, forKey: "language")
        try values.encodeIfPresent(logLevel, forKey: "logLevel")
        try values.encodeIfPresent(version, forKey: "version")
    }
}
