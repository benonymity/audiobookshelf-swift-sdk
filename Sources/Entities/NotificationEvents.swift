// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct NotificationEvents: Codable {
    /// The name of the notification event.
    public var name: String?
    /// Whether the notification event depends on a library existing.
    public var requiresLibrary: Bool?
    /// The type of media of the library the notification depends on existing. Will not exist if requiresLibrary is false.
    public var libraryMediaType: String?
    /// The description of the notification event.
    public var description: String?
    /// The variables of the notification event that can be used in the notification templates.
    public var variables: [String]?
    public var defaults: Defaults?
    /// The keys of the testData object will match the list of variables. The values will be the data used when sending a test notification.
    public var testData: TestData?

    public struct Defaults: Codable {
        /// The default title template for notifications using the notification event.
        public var title: String?
        /// The default body template for notifications using the notification event.
        public var body: String?

        public init(title: String? = nil, body: String? = nil) {
            self.title = title
            self.body = body
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.title = try values.decodeIfPresent(String.self, forKey: "title")
            self.body = try values.decodeIfPresent(String.self, forKey: "body")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(title, forKey: "title")
            try values.encodeIfPresent(body, forKey: "body")
        }
    }

    /// The keys of the testData object will match the list of variables. The values will be the data used when sending a test notification.
    public struct TestData: Codable {
        public var libraryItemID: String?
        public var libraryID: String?
        public var libraryName: String?
        public var podcastTitle: String?
        public var episodeID: String?
        public var episodeTitle: String?

        public init(libraryItemID: String? = nil, libraryID: String? = nil, libraryName: String? = nil, podcastTitle: String? = nil, episodeID: String? = nil, episodeTitle: String? = nil) {
            self.libraryItemID = libraryItemID
            self.libraryID = libraryID
            self.libraryName = libraryName
            self.podcastTitle = podcastTitle
            self.episodeID = episodeID
            self.episodeTitle = episodeTitle
        }

        public init(from decoder: Decoder) throws {
            let values = try decoder.container(keyedBy: StringCodingKey.self)
            self.libraryItemID = try values.decodeIfPresent(String.self, forKey: "libraryItemId")
            self.libraryID = try values.decodeIfPresent(String.self, forKey: "libraryId")
            self.libraryName = try values.decodeIfPresent(String.self, forKey: "libraryName")
            self.podcastTitle = try values.decodeIfPresent(String.self, forKey: "podcastTitle")
            self.episodeID = try values.decodeIfPresent(String.self, forKey: "episodeId")
            self.episodeTitle = try values.decodeIfPresent(String.self, forKey: "episodeTitle")
        }

        public func encode(to encoder: Encoder) throws {
            var values = encoder.container(keyedBy: StringCodingKey.self)
            try values.encodeIfPresent(libraryItemID, forKey: "libraryItemId")
            try values.encodeIfPresent(libraryID, forKey: "libraryId")
            try values.encodeIfPresent(libraryName, forKey: "libraryName")
            try values.encodeIfPresent(podcastTitle, forKey: "podcastTitle")
            try values.encodeIfPresent(episodeID, forKey: "episodeId")
            try values.encodeIfPresent(episodeTitle, forKey: "episodeTitle")
        }
    }

    public init(name: String? = nil, requiresLibrary: Bool? = nil, libraryMediaType: String? = nil, description: String? = nil, variables: [String]? = nil, defaults: Defaults? = nil, testData: TestData? = nil) {
        self.name = name
        self.requiresLibrary = requiresLibrary
        self.libraryMediaType = libraryMediaType
        self.description = description
        self.variables = variables
        self.defaults = defaults
        self.testData = testData
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.requiresLibrary = try values.decodeIfPresent(Bool.self, forKey: "requiresLibrary")
        self.libraryMediaType = try values.decodeIfPresent(String.self, forKey: "libraryMediaType")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.variables = try values.decodeIfPresent([String].self, forKey: "variables")
        self.defaults = try values.decodeIfPresent(Defaults.self, forKey: "defaults")
        self.testData = try values.decodeIfPresent(TestData.self, forKey: "testData")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(requiresLibrary, forKey: "requiresLibrary")
        try values.encodeIfPresent(libraryMediaType, forKey: "libraryMediaType")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(variables, forKey: "variables")
        try values.encodeIfPresent(defaults, forKey: "defaults")
        try values.encodeIfPresent(testData, forKey: "testData")
    }
}
