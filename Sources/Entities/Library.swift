// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct Library: Codable {
    /// The ID of the library. (Read Only)
    public var id: String?
    /// The name of the library.
    public var name: String?
    /// The folders that the library is composed of on the server.
    public var folders: [Folder]?
    /// Display position of the library in the list of libraries. Must be >= 1.
    public var displayOrder: Int?
    /// The selected icon for the library. See [Library Icons](https://api.audiobookshelf.org/#library-icons) for a list of possible icons.
    public var icon: String?
    /// The type of media that the library contains. Will be book or podcast. (Read Only)
    public var mediaType: String?
    /// Preferred metadata provider for the library. See [Metadata Providers](https://api.audiobookshelf.org/#metadata-providers) for a list of possible providers.
    public var provider: String?
    public var settings: LibrarySettings?
    /// The time (in ms since POSIX epoch) when the library was created. (Read Only)
    public var createdAt: Int?
    /// The time (in ms since POSIX epoch) when the library was last updated. (Read Only)
    public var lastUpdate: Int?

    public init(id: String? = nil, name: String? = nil, folders: [Folder]? = nil, displayOrder: Int? = nil, icon: String? = nil, mediaType: String? = nil, provider: String? = nil, settings: LibrarySettings? = nil, createdAt: Int? = nil, lastUpdate: Int? = nil) {
        self.id = id
        self.name = name
        self.folders = folders
        self.displayOrder = displayOrder
        self.icon = icon
        self.mediaType = mediaType
        self.provider = provider
        self.settings = settings
        self.createdAt = createdAt
        self.lastUpdate = lastUpdate
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.folders = try values.decodeIfPresent([Folder].self, forKey: "folders")
        self.displayOrder = try values.decodeIfPresent(Int.self, forKey: "displayOrder")
        self.icon = try values.decodeIfPresent(String.self, forKey: "icon")
        self.mediaType = try values.decodeIfPresent(String.self, forKey: "mediaType")
        self.provider = try values.decodeIfPresent(String.self, forKey: "provider")
        self.settings = try values.decodeIfPresent(LibrarySettings.self, forKey: "settings")
        self.createdAt = try values.decodeIfPresent(Int.self, forKey: "createdAt")
        self.lastUpdate = try values.decodeIfPresent(Int.self, forKey: "lastUpdate")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(folders, forKey: "folders")
        try values.encodeIfPresent(displayOrder, forKey: "displayOrder")
        try values.encodeIfPresent(icon, forKey: "icon")
        try values.encodeIfPresent(mediaType, forKey: "mediaType")
        try values.encodeIfPresent(provider, forKey: "provider")
        try values.encodeIfPresent(settings, forKey: "settings")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
        try values.encodeIfPresent(lastUpdate, forKey: "lastUpdate")
    }
}
