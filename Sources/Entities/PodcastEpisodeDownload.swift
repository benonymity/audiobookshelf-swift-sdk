// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct PodcastEpisodeDownload: Codable {
    /// The ID of the podcast episode download.
    public var id: String?
    /// The display title of the episode to be downloaded.
    public var episodeDisplayTitle: String?
    /// The URL from which to download the episode.
    public var url: String?
    /// The ID of the library item the episode belongs to.
    public var libraryItemID: String?
    /// The ID of the library the episode's podcast belongs to.
    public var libraryID: String?
    /// Whether the episode has finished downloading.
    public var isFinished: Bool?
    /// Whether the episode failed to download.
    public var isFailed: Bool?
    /// The time (in ms since POSIX epoch) when the episode started downloading. Will be null if it has not started downloading yet.
    public var startedAt: String?
    /// The time (in ms since POSIX epoch) when the podcast episode download request was created.
    public var createdAt: Int?
    /// The time (in ms since POSIX epoch) when the episode finished downloading. Will be null if it has not finished.
    public var finishedAt: String?
    /// The title of the episode's podcast.
    public var podcastTitle: String?
    /// Whether the episode's podcast is explicit.
    public var isPodcastExplicit: Bool?
    /// The season of the podcast episode.
    public var season: String?
    /// The episode number of the podcast episode.
    public var episode: String?
    /// The type of the podcast episode.
    public var episodeType: String?
    /// The time (in ms since POSIX epoch) when the episode was published.
    public var publishedAt: Int?

    public init(id: String? = nil, episodeDisplayTitle: String? = nil, url: String? = nil, libraryItemID: String? = nil, libraryID: String? = nil, isFinished: Bool? = nil, isFailed: Bool? = nil, startedAt: String? = nil, createdAt: Int? = nil, finishedAt: String? = nil, podcastTitle: String? = nil, isPodcastExplicit: Bool? = nil, season: String? = nil, episode: String? = nil, episodeType: String? = nil, publishedAt: Int? = nil) {
        self.id = id
        self.episodeDisplayTitle = episodeDisplayTitle
        self.url = url
        self.libraryItemID = libraryItemID
        self.libraryID = libraryID
        self.isFinished = isFinished
        self.isFailed = isFailed
        self.startedAt = startedAt
        self.createdAt = createdAt
        self.finishedAt = finishedAt
        self.podcastTitle = podcastTitle
        self.isPodcastExplicit = isPodcastExplicit
        self.season = season
        self.episode = episode
        self.episodeType = episodeType
        self.publishedAt = publishedAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.episodeDisplayTitle = try values.decodeIfPresent(String.self, forKey: "episodeDisplayTitle")
        self.url = try values.decodeIfPresent(String.self, forKey: "url")
        self.libraryItemID = try values.decodeIfPresent(String.self, forKey: "libraryItemId")
        self.libraryID = try values.decodeIfPresent(String.self, forKey: "libraryId")
        self.isFinished = try values.decodeIfPresent(Bool.self, forKey: "isFinished")
        self.isFailed = try values.decodeIfPresent(Bool.self, forKey: "failed")
        self.startedAt = try values.decodeIfPresent(String.self, forKey: "startedAt")
        self.createdAt = try values.decodeIfPresent(Int.self, forKey: "createdAt")
        self.finishedAt = try values.decodeIfPresent(String.self, forKey: "finishedAt")
        self.podcastTitle = try values.decodeIfPresent(String.self, forKey: "podcastTitle")
        self.isPodcastExplicit = try values.decodeIfPresent(Bool.self, forKey: "podcastExplicit")
        self.season = try values.decodeIfPresent(String.self, forKey: "season")
        self.episode = try values.decodeIfPresent(String.self, forKey: "episode")
        self.episodeType = try values.decodeIfPresent(String.self, forKey: "episodeType")
        self.publishedAt = try values.decodeIfPresent(Int.self, forKey: "publishedAt")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(episodeDisplayTitle, forKey: "episodeDisplayTitle")
        try values.encodeIfPresent(url, forKey: "url")
        try values.encodeIfPresent(libraryItemID, forKey: "libraryItemId")
        try values.encodeIfPresent(libraryID, forKey: "libraryId")
        try values.encodeIfPresent(isFinished, forKey: "isFinished")
        try values.encodeIfPresent(isFailed, forKey: "failed")
        try values.encodeIfPresent(startedAt, forKey: "startedAt")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
        try values.encodeIfPresent(finishedAt, forKey: "finishedAt")
        try values.encodeIfPresent(podcastTitle, forKey: "podcastTitle")
        try values.encodeIfPresent(isPodcastExplicit, forKey: "podcastExplicit")
        try values.encodeIfPresent(season, forKey: "season")
        try values.encodeIfPresent(episode, forKey: "episode")
        try values.encodeIfPresent(episodeType, forKey: "episodeType")
        try values.encodeIfPresent(publishedAt, forKey: "publishedAt")
    }
}
