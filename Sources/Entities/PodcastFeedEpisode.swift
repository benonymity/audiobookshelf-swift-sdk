// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct PodcastFeedEpisode: Codable {
    /// The podcast episode's title.
    public var title: String?
    /// The podcast episode's subtitle.
    public var subtitle: String?
    /// A HTML encoded description of the podcast episode.
    public var description: String?
    /// A plain text description of the podcast episode.
    public var descriptionPlain: String?
    /// The podcast episode's publication date.
    public var pubDate: String?
    /// The type of episode that the podcast episode is.
    public var episodeType: String?
    /// The season of the podcast episode.
    public var season: String?
    /// The episode of the season of the podcast.
    public var episode: String?
    /// The author of the podcast episode.
    public var author: String?
    /// The duration of the podcast episode as reported by the RSS feed.
    public var duration: String?
    /// Whether the podcast episode is explicit.
    public var explicit: String?
    /// The time (in ms since POSIX epoch) when the podcast episode was published.
    public var publishedAt: Int?
    public var enclosure: PodcastEpisodeEnclousure?

    public init(title: String? = nil, subtitle: String? = nil, description: String? = nil, descriptionPlain: String? = nil, pubDate: String? = nil, episodeType: String? = nil, season: String? = nil, episode: String? = nil, author: String? = nil, duration: String? = nil, explicit: String? = nil, publishedAt: Int? = nil, enclosure: PodcastEpisodeEnclousure? = nil) {
        self.title = title
        self.subtitle = subtitle
        self.description = description
        self.descriptionPlain = descriptionPlain
        self.pubDate = pubDate
        self.episodeType = episodeType
        self.season = season
        self.episode = episode
        self.author = author
        self.duration = duration
        self.explicit = explicit
        self.publishedAt = publishedAt
        self.enclosure = enclosure
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.subtitle = try values.decodeIfPresent(String.self, forKey: "subtitle")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.descriptionPlain = try values.decodeIfPresent(String.self, forKey: "descriptionPlain")
        self.pubDate = try values.decodeIfPresent(String.self, forKey: "pubDate")
        self.episodeType = try values.decodeIfPresent(String.self, forKey: "episodeType")
        self.season = try values.decodeIfPresent(String.self, forKey: "season")
        self.episode = try values.decodeIfPresent(String.self, forKey: "episode")
        self.author = try values.decodeIfPresent(String.self, forKey: "author")
        self.duration = try values.decodeIfPresent(String.self, forKey: "duration")
        self.explicit = try values.decodeIfPresent(String.self, forKey: "explicit")
        self.publishedAt = try values.decodeIfPresent(Int.self, forKey: "publishedAt")
        self.enclosure = try values.decodeIfPresent(PodcastEpisodeEnclousure.self, forKey: "enclosure")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(subtitle, forKey: "subtitle")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(descriptionPlain, forKey: "descriptionPlain")
        try values.encodeIfPresent(pubDate, forKey: "pubDate")
        try values.encodeIfPresent(episodeType, forKey: "episodeType")
        try values.encodeIfPresent(season, forKey: "season")
        try values.encodeIfPresent(episode, forKey: "episode")
        try values.encodeIfPresent(author, forKey: "author")
        try values.encodeIfPresent(duration, forKey: "duration")
        try values.encodeIfPresent(explicit, forKey: "explicit")
        try values.encodeIfPresent(publishedAt, forKey: "publishedAt")
        try values.encodeIfPresent(enclosure, forKey: "enclosure")
    }
}
