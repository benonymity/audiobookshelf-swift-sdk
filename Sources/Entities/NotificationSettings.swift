// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct NotificationSettings: Codable {
    /// The ID of the notification settings.
    public var id: String?
    /// The type of Apprise that will be used. At the moment, only api is available.
    public var appriseType: String?
    /// The full URL where the Apprise API to use is located.
    public var appriseAPIURL: String?
    /// The set notifications.
    public var notifications: [Notification]?
    /// The maximum number of times a notification fails before being disabled.
    public var maxFailedAttempts: Int?
    /// The maximum number of notifications in the notification queue before events are ignored.
    public var maxNotificationQueue: Int?
    /// The time (in ms) between notification pushes.
    public var notificationDelay: Int?

    public init(id: String? = nil, appriseType: String? = nil, appriseAPIURL: String? = nil, notifications: [Notification]? = nil, maxFailedAttempts: Int? = nil, maxNotificationQueue: Int? = nil, notificationDelay: Int? = nil) {
        self.id = id
        self.appriseType = appriseType
        self.appriseAPIURL = appriseAPIURL
        self.notifications = notifications
        self.maxFailedAttempts = maxFailedAttempts
        self.maxNotificationQueue = maxNotificationQueue
        self.notificationDelay = notificationDelay
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.appriseType = try values.decodeIfPresent(String.self, forKey: "appriseType")
        self.appriseAPIURL = try values.decodeIfPresent(String.self, forKey: "appriseApiUrl")
        self.notifications = try values.decodeIfPresent([Notification].self, forKey: "notifications")
        self.maxFailedAttempts = try values.decodeIfPresent(Int.self, forKey: "maxFailedAttempts")
        self.maxNotificationQueue = try values.decodeIfPresent(Int.self, forKey: "maxNotificationQueue")
        self.notificationDelay = try values.decodeIfPresent(Int.self, forKey: "notificationDelay")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(appriseType, forKey: "appriseType")
        try values.encodeIfPresent(appriseAPIURL, forKey: "appriseApiUrl")
        try values.encodeIfPresent(notifications, forKey: "notifications")
        try values.encodeIfPresent(maxFailedAttempts, forKey: "maxFailedAttempts")
        try values.encodeIfPresent(maxNotificationQueue, forKey: "maxNotificationQueue")
        try values.encodeIfPresent(notificationDelay, forKey: "notificationDelay")
    }
}
