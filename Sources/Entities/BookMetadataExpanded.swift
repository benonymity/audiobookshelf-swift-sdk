// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct BookMetadataExpanded: Codable {
    /// The title of the book. Will be null if unknown.
    public var title: String?
    /// The title of the book with any prefix moved to the end.
    public var titleIgnorePrefix: String?
    /// The subtitle of the book. Will be null if there is no subtitle.
    public var subtitle: String?
    /// The name of the book's author(s).
    public var authorName: String?
    /// The name of the book's author(s) with last names first.
    public var authorNameLF: String?
    /// The name of the audiobook's narrator(s).
    public var narratorName: String?
    /// The name of the book's series.
    public var seriesName: String?
    /// The authors of the book.
    public var authors: [AuthorMinified]?
    /// The narrators of the audiobook.
    public var narrators: [String]?
    /// The series the book belongs to.
    public var series: [SeriesSequence]?
    /// The genres of the book.
    public var genres: [String]?
    /// The year the book was published. Will be null if unknown.
    public var publishedYear: String?
    /// The date the book was published. Will be null if unknown.
    public var publishedDate: String?
    /// The publisher of the book. Will be null if unknown.
    public var publisher: String?
    /// A description for the book. Will be null if empty.
    public var description: String?
    /// The ISBN of the book. Will be null if unknown.
    public var isbn: String?
    /// The ASIN of the book. Will be null if unknown.
    public var asin: String?
    /// The language of the book. Will be null if unknown.
    public var language: String?
    /// Whether the book has been marked as explicit.
    public var isExplicit: Bool?

    public init(title: String? = nil, titleIgnorePrefix: String? = nil, subtitle: String? = nil, authorName: String? = nil, authorNameLF: String? = nil, narratorName: String? = nil, seriesName: String? = nil, authors: [AuthorMinified]? = nil, narrators: [String]? = nil, series: [SeriesSequence]? = nil, genres: [String]? = nil, publishedYear: String? = nil, publishedDate: String? = nil, publisher: String? = nil, description: String? = nil, isbn: String? = nil, asin: String? = nil, language: String? = nil, isExplicit: Bool? = nil) {
        self.title = title
        self.titleIgnorePrefix = titleIgnorePrefix
        self.subtitle = subtitle
        self.authorName = authorName
        self.authorNameLF = authorNameLF
        self.narratorName = narratorName
        self.seriesName = seriesName
        self.authors = authors
        self.narrators = narrators
        self.series = series
        self.genres = genres
        self.publishedYear = publishedYear
        self.publishedDate = publishedDate
        self.publisher = publisher
        self.description = description
        self.isbn = isbn
        self.asin = asin
        self.language = language
        self.isExplicit = isExplicit
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.titleIgnorePrefix = try values.decodeIfPresent(String.self, forKey: "titleIgnorePrefix")
        self.subtitle = try values.decodeIfPresent(String.self, forKey: "subtitle")
        self.authorName = try values.decodeIfPresent(String.self, forKey: "authorName")
        self.authorNameLF = try values.decodeIfPresent(String.self, forKey: "authorNameLF")
        self.narratorName = try values.decodeIfPresent(String.self, forKey: "narratorName")
        self.seriesName = try values.decodeIfPresent(String.self, forKey: "seriesName")
        self.authors = try values.decodeIfPresent([AuthorMinified].self, forKey: "authors")
        self.narrators = try values.decodeIfPresent([String].self, forKey: "narrators")
        self.series = try values.decodeIfPresent([SeriesSequence].self, forKey: "series")
        self.genres = try values.decodeIfPresent([String].self, forKey: "genres")
        self.publishedYear = try values.decodeIfPresent(String.self, forKey: "publishedYear")
        self.publishedDate = try values.decodeIfPresent(String.self, forKey: "publishedDate")
        self.publisher = try values.decodeIfPresent(String.self, forKey: "publisher")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.isbn = try values.decodeIfPresent(String.self, forKey: "isbn")
        self.asin = try values.decodeIfPresent(String.self, forKey: "asin")
        self.language = try values.decodeIfPresent(String.self, forKey: "language")
        self.isExplicit = try values.decodeIfPresent(Bool.self, forKey: "explicit")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(titleIgnorePrefix, forKey: "titleIgnorePrefix")
        try values.encodeIfPresent(subtitle, forKey: "subtitle")
        try values.encodeIfPresent(authorName, forKey: "authorName")
        try values.encodeIfPresent(authorNameLF, forKey: "authorNameLF")
        try values.encodeIfPresent(narratorName, forKey: "narratorName")
        try values.encodeIfPresent(seriesName, forKey: "seriesName")
        try values.encodeIfPresent(authors, forKey: "authors")
        try values.encodeIfPresent(narrators, forKey: "narrators")
        try values.encodeIfPresent(series, forKey: "series")
        try values.encodeIfPresent(genres, forKey: "genres")
        try values.encodeIfPresent(publishedYear, forKey: "publishedYear")
        try values.encodeIfPresent(publishedDate, forKey: "publishedDate")
        try values.encodeIfPresent(publisher, forKey: "publisher")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(isbn, forKey: "isbn")
        try values.encodeIfPresent(asin, forKey: "asin")
        try values.encodeIfPresent(language, forKey: "language")
        try values.encodeIfPresent(isExplicit, forKey: "explicit")
    }
}
