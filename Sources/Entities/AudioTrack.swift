// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct AudioTrack: Codable {
    /// The index of the audio track.
    public var index: Int?
    /// When in the audio file (in seconds) the track starts.
    public var startOffset: Double?
    /// The length (in seconds) of the audio track.
    public var duration: Double?
    /// The filename of the audio file the audio track belongs to.
    public var title: String?
    /// The URL path of the audio file.
    public var contentURL: String?
    /// The MIME type of the audio file.
    public var mimeType: String?
    public var metadata: FileMetadata?

    public init(index: Int? = nil, startOffset: Double? = nil, duration: Double? = nil, title: String? = nil, contentURL: String? = nil, mimeType: String? = nil, metadata: FileMetadata? = nil) {
        self.index = index
        self.startOffset = startOffset
        self.duration = duration
        self.title = title
        self.contentURL = contentURL
        self.mimeType = mimeType
        self.metadata = metadata
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.index = try values.decodeIfPresent(Int.self, forKey: "index")
        self.startOffset = try values.decodeIfPresent(Double.self, forKey: "startOffset")
        self.duration = try values.decodeIfPresent(Double.self, forKey: "duration")
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.contentURL = try values.decodeIfPresent(String.self, forKey: "contentUrl")
        self.mimeType = try values.decodeIfPresent(String.self, forKey: "mimeType")
        self.metadata = try values.decodeIfPresent(FileMetadata.self, forKey: "metadata")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(index, forKey: "index")
        try values.encodeIfPresent(startOffset, forKey: "startOffset")
        try values.encodeIfPresent(duration, forKey: "duration")
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(contentURL, forKey: "contentUrl")
        try values.encodeIfPresent(mimeType, forKey: "mimeType")
        try values.encodeIfPresent(metadata, forKey: "metadata")
    }
}
