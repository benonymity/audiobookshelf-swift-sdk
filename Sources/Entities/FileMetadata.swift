// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct FileMetadata: Codable {
    /// The filename of the file.
    public var filename: String?
    /// The file extension of the file.
    public var ext: String?
    /// The absolute path on the server of the file.
    public var path: String?
    /// The path of the file, relative to the book's or podcast's folder.
    public var relPath: String?
    /// The size (in bytes) of the file.
    public var size: Int?
    /// The time (in ms since POSIX epoch) when the file was last modified on disk.
    public var mtimeMs: Int?
    /// The time (in ms since POSIX epoch) when the file status was changed on disk.
    public var ctimeMs: Int?
    /// The time (in ms since POSIX epoch) when the file was created on disk. Will be 0 if unknown.
    public var birthtimeMs: Int?

    public init(filename: String? = nil, ext: String? = nil, path: String? = nil, relPath: String? = nil, size: Int? = nil, mtimeMs: Int? = nil, ctimeMs: Int? = nil, birthtimeMs: Int? = nil) {
        self.filename = filename
        self.ext = ext
        self.path = path
        self.relPath = relPath
        self.size = size
        self.mtimeMs = mtimeMs
        self.ctimeMs = ctimeMs
        self.birthtimeMs = birthtimeMs
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.filename = try values.decodeIfPresent(String.self, forKey: "filename")
        self.ext = try values.decodeIfPresent(String.self, forKey: "ext")
        self.path = try values.decodeIfPresent(String.self, forKey: "path")
        self.relPath = try values.decodeIfPresent(String.self, forKey: "relPath")
        self.size = try values.decodeIfPresent(Int.self, forKey: "size")
        self.mtimeMs = try values.decodeIfPresent(Int.self, forKey: "mtimeMs")
        self.ctimeMs = try values.decodeIfPresent(Int.self, forKey: "ctimeMs")
        self.birthtimeMs = try values.decodeIfPresent(Int.self, forKey: "birthtimeMs")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(filename, forKey: "filename")
        try values.encodeIfPresent(ext, forKey: "ext")
        try values.encodeIfPresent(path, forKey: "path")
        try values.encodeIfPresent(relPath, forKey: "relPath")
        try values.encodeIfPresent(size, forKey: "size")
        try values.encodeIfPresent(mtimeMs, forKey: "mtimeMs")
        try values.encodeIfPresent(ctimeMs, forKey: "ctimeMs")
        try values.encodeIfPresent(birthtimeMs, forKey: "birthtimeMs")
    }
}
