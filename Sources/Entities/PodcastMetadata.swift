// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct PodcastMetadata: Codable {
    /// The title of the podcast. Will be null if unknown.
    public var title: String?
    /// The author of the podcast. Will be null if unknown.
    public var author: String?
    /// The description for the podcast. Will be null if unknown.
    public var description: String?
    /// The release date of the podcast. Will be null if unknown.
    public var releaseDate: Date?
    /// The podcast's genres.
    public var genres: [String]?
    /// A URL of an RSS feed for the podcast. Will be null if unknown.
    public var feedURL: String?
    /// A URL of a cover image for the podcast. Will be null if unknown.
    public var imageURL: String?
    /// A URL of an iTunes page for the podcast. Will be null if unknown.
    public var itunesPageURL: String?
    /// The iTunes ID for the podcast. Will be null if unknown.
    public var itunesID: Int?
    /// The iTunes Artist ID for the author of the podcast. Will be null if unknown.
    public var itunesArtistID: Int?
    /// Whether the podcast has been marked as explicit.
    public var isExplicit: Bool?
    /// The language of the podcast. Will be null if unknown.
    public var language: String?
    /// The type of the podcast.
    public var type: String?

    public init(title: String? = nil, author: String? = nil, description: String? = nil, releaseDate: Date? = nil, genres: [String]? = nil, feedURL: String? = nil, imageURL: String? = nil, itunesPageURL: String? = nil, itunesID: Int? = nil, itunesArtistID: Int? = nil, isExplicit: Bool? = nil, language: String? = nil, type: String? = nil) {
        self.title = title
        self.author = author
        self.description = description
        self.releaseDate = releaseDate
        self.genres = genres
        self.feedURL = feedURL
        self.imageURL = imageURL
        self.itunesPageURL = itunesPageURL
        self.itunesID = itunesID
        self.itunesArtistID = itunesArtistID
        self.isExplicit = isExplicit
        self.language = language
        self.type = type
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.author = try values.decodeIfPresent(String.self, forKey: "author")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.releaseDate = try values.decodeIfPresent(Date.self, forKey: "releaseDate")
        self.genres = try values.decodeIfPresent([String].self, forKey: "genres")
        self.feedURL = try values.decodeIfPresent(String.self, forKey: "feedUrl")
        self.imageURL = try values.decodeIfPresent(String.self, forKey: "imageUrl")
        self.itunesPageURL = try values.decodeIfPresent(String.self, forKey: "itunesPageUrl")
        self.itunesID = try values.decodeIfPresent(Int.self, forKey: "itunesId")
        self.itunesArtistID = try values.decodeIfPresent(Int.self, forKey: "itunesArtistId")
        self.isExplicit = try values.decodeIfPresent(Bool.self, forKey: "explicit")
        self.language = try values.decodeIfPresent(String.self, forKey: "language")
        self.type = try values.decodeIfPresent(String.self, forKey: "type")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(author, forKey: "author")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(releaseDate, forKey: "releaseDate")
        try values.encodeIfPresent(genres, forKey: "genres")
        try values.encodeIfPresent(feedURL, forKey: "feedUrl")
        try values.encodeIfPresent(imageURL, forKey: "imageUrl")
        try values.encodeIfPresent(itunesPageURL, forKey: "itunesPageUrl")
        try values.encodeIfPresent(itunesID, forKey: "itunesId")
        try values.encodeIfPresent(itunesArtistID, forKey: "itunesArtistId")
        try values.encodeIfPresent(isExplicit, forKey: "explicit")
        try values.encodeIfPresent(language, forKey: "language")
        try values.encodeIfPresent(type, forKey: "type")
    }
}
