// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct UserWithSession: Codable {
    /// The ID of the user. Only the root user has the root ID.
    public var id: String?
    /// The username of the user.
    public var username: String?
    /// The type of the user. Will be root, guest, user, or admin. There will be only one root user which is created when the server first starts.
    public var type: String?
    public var session: PlaybackSessionExpanded?
    /// The time (in ms since POSIX epoch) when the user was last seen by the server. Will be null if the user has never logged in.
    public var lastSeen: Int?
    /// The time (in ms since POSIX epoch) when the user was created.
    public var createdAt: Int?

    public init(id: String? = nil, username: String? = nil, type: String? = nil, session: PlaybackSessionExpanded? = nil, lastSeen: Int? = nil, createdAt: Int? = nil) {
        self.id = id
        self.username = username
        self.type = type
        self.session = session
        self.lastSeen = lastSeen
        self.createdAt = createdAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.username = try values.decodeIfPresent(String.self, forKey: "username")
        self.type = try values.decodeIfPresent(String.self, forKey: "type")
        self.session = try values.decodeIfPresent(PlaybackSessionExpanded.self, forKey: "session")
        self.lastSeen = try values.decodeIfPresent(Int.self, forKey: "lastSeen")
        self.createdAt = try values.decodeIfPresent(Int.self, forKey: "createdAt")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(username, forKey: "username")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(session, forKey: "session")
        try values.encodeIfPresent(lastSeen, forKey: "lastSeen")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
    }
}
