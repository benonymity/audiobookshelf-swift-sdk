// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct RssFeedMetadata: Codable {
    /// The title of the entity the RSS feed is for.
    public var title: String?
    /// The description of the entity the RSS feed is for.
    public var description: String?
    /// The author of the entity the RSS feed is for.
    public var author: String?
    /// The URL of the RSS feed's image.
    public var imageURL: String?
    /// The URL of the RSS feed.
    public var feedURL: String?
    /// The URL of the entity the RSS feed is for.
    public var link: String?
    /// Whether the RSS feed's contents are explicit.
    public var isExplicit: Bool?
    /// The type of the RSS feed.
    public var type: String?
    /// The language of the RSS feed.
    public var language: String?
    /// Whether the RSS feed is marked to prevent indexing of the feed.
    public var isPreventIndexing: Bool?
    /// The owner name of the RSS feed.
    public var ownerName: String?
    /// The owner email of the RSS feed.
    public var ownerEmail: String?

    public init(title: String? = nil, description: String? = nil, author: String? = nil, imageURL: String? = nil, feedURL: String? = nil, link: String? = nil, isExplicit: Bool? = nil, type: String? = nil, language: String? = nil, isPreventIndexing: Bool? = nil, ownerName: String? = nil, ownerEmail: String? = nil) {
        self.title = title
        self.description = description
        self.author = author
        self.imageURL = imageURL
        self.feedURL = feedURL
        self.link = link
        self.isExplicit = isExplicit
        self.type = type
        self.language = language
        self.isPreventIndexing = isPreventIndexing
        self.ownerName = ownerName
        self.ownerEmail = ownerEmail
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.author = try values.decodeIfPresent(String.self, forKey: "author")
        self.imageURL = try values.decodeIfPresent(String.self, forKey: "imageUrl")
        self.feedURL = try values.decodeIfPresent(String.self, forKey: "feedUrl")
        self.link = try values.decodeIfPresent(String.self, forKey: "link")
        self.isExplicit = try values.decodeIfPresent(Bool.self, forKey: "explicit")
        self.type = try values.decodeIfPresent(String.self, forKey: "type")
        self.language = try values.decodeIfPresent(String.self, forKey: "language")
        self.isPreventIndexing = try values.decodeIfPresent(Bool.self, forKey: "preventIndexing")
        self.ownerName = try values.decodeIfPresent(String.self, forKey: "ownerName")
        self.ownerEmail = try values.decodeIfPresent(String.self, forKey: "ownerEmail")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(author, forKey: "author")
        try values.encodeIfPresent(imageURL, forKey: "imageUrl")
        try values.encodeIfPresent(feedURL, forKey: "feedUrl")
        try values.encodeIfPresent(link, forKey: "link")
        try values.encodeIfPresent(isExplicit, forKey: "explicit")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(language, forKey: "language")
        try values.encodeIfPresent(isPreventIndexing, forKey: "preventIndexing")
        try values.encodeIfPresent(ownerName, forKey: "ownerName")
        try values.encodeIfPresent(ownerEmail, forKey: "ownerEmail")
    }
}
