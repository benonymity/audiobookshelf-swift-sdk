// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct RssFeed: Codable {
    /// The ID of the RSS feed.
    public var id: String?
    /// The slug (the last part of the URL) for the RSS feed.
    public var slug: String?
    /// The ID of the user that created the RSS feed.
    public var userID: String?
    /// The type of entity the RSS feed is for.
    public var entityType: String?
    /// The ID of the entity the RSS feed is for.
    public var entityID: String?
    /// The path of the cover to use for the RSS feed.
    public var coverPath: String?
    /// The server's address.
    public var serverAddress: String?
    /// The full URL of the RSS feed.
    public var feedURL: String?
    public var meta: RssFeedMetadata?
    /// The RSS feed's episodes.
    public var episodes: [RssFeedEpisode]?
    /// The time (in ms since POSIX epoch) when the RSS feed was created.
    public var createdAt: Int?
    /// The time (in ms since POSIX epoch) when the RSS feed was last updated.
    public var updatedAt: Int?

    public init(id: String? = nil, slug: String? = nil, userID: String? = nil, entityType: String? = nil, entityID: String? = nil, coverPath: String? = nil, serverAddress: String? = nil, feedURL: String? = nil, meta: RssFeedMetadata? = nil, episodes: [RssFeedEpisode]? = nil, createdAt: Int? = nil, updatedAt: Int? = nil) {
        self.id = id
        self.slug = slug
        self.userID = userID
        self.entityType = entityType
        self.entityID = entityID
        self.coverPath = coverPath
        self.serverAddress = serverAddress
        self.feedURL = feedURL
        self.meta = meta
        self.episodes = episodes
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.slug = try values.decodeIfPresent(String.self, forKey: "slug")
        self.userID = try values.decodeIfPresent(String.self, forKey: "userId")
        self.entityType = try values.decodeIfPresent(String.self, forKey: "entityType")
        self.entityID = try values.decodeIfPresent(String.self, forKey: "entityId")
        self.coverPath = try values.decodeIfPresent(String.self, forKey: "coverPath")
        self.serverAddress = try values.decodeIfPresent(String.self, forKey: "serverAddress")
        self.feedURL = try values.decodeIfPresent(String.self, forKey: "feedUrl")
        self.meta = try values.decodeIfPresent(RssFeedMetadata.self, forKey: "meta")
        self.episodes = try values.decodeIfPresent([RssFeedEpisode].self, forKey: "episodes")
        self.createdAt = try values.decodeIfPresent(Int.self, forKey: "createdAt")
        self.updatedAt = try values.decodeIfPresent(Int.self, forKey: "updatedAt")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(slug, forKey: "slug")
        try values.encodeIfPresent(userID, forKey: "userId")
        try values.encodeIfPresent(entityType, forKey: "entityType")
        try values.encodeIfPresent(entityID, forKey: "entityId")
        try values.encodeIfPresent(coverPath, forKey: "coverPath")
        try values.encodeIfPresent(serverAddress, forKey: "serverAddress")
        try values.encodeIfPresent(feedURL, forKey: "feedUrl")
        try values.encodeIfPresent(meta, forKey: "meta")
        try values.encodeIfPresent(episodes, forKey: "episodes")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
        try values.encodeIfPresent(updatedAt, forKey: "updatedAt")
    }
}
