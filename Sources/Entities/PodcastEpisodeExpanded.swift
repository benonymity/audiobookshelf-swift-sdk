// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct PodcastEpisodeExpanded: Codable {
    /// The ID of the library item that contains the podcast.
    public var libraryItemID: String?
    /// The ID of the podcast episode.
    public var id: String?
    /// The index of the podcast episode.
    public var index: Int?
    /// The season of the podcast episode, if known.
    public var season: String?
    /// The episode of the season of the podcast, if known.
    public var episode: String?
    /// The type of episode that the podcast episode is.
    public var episodeType: String?
    /// The title of the podcast episode.
    public var title: String?
    /// The subtitle of the podcast episode.
    public var subtitle: String?
    /// A HTML encoded, description of the podcast episode.
    public var description: String?
    public var enclosure: PodcastEpisodeEnclousure?
    /// When the podcast episode was published.
    public var pubDate: String?
    public var audioFile: AudioFile?
    public var audioTrack: AudioTrack?
    /// The time (in ms since POSIX epoch) when the podcast episode was published.
    public var publishedAt: Int?
    /// The time (in ms since POSIX epoch) when the podcast episode was added to the library.
    public var addedAt: Int?
    /// The time (in ms since POSIX epoch) when the podcast episode was last updated.
    public var updatedAt: Int?
    /// The total length (in seconds) of the podcast episode.
    public var duration: Double?
    /// The total size (in bytes) of the podcast episode.
    public var size: Int?

    public init(libraryItemID: String? = nil, id: String? = nil, index: Int? = nil, season: String? = nil, episode: String? = nil, episodeType: String? = nil, title: String? = nil, subtitle: String? = nil, description: String? = nil, enclosure: PodcastEpisodeEnclousure? = nil, pubDate: String? = nil, audioFile: AudioFile? = nil, audioTrack: AudioTrack? = nil, publishedAt: Int? = nil, addedAt: Int? = nil, updatedAt: Int? = nil, duration: Double? = nil, size: Int? = nil) {
        self.libraryItemID = libraryItemID
        self.id = id
        self.index = index
        self.season = season
        self.episode = episode
        self.episodeType = episodeType
        self.title = title
        self.subtitle = subtitle
        self.description = description
        self.enclosure = enclosure
        self.pubDate = pubDate
        self.audioFile = audioFile
        self.audioTrack = audioTrack
        self.publishedAt = publishedAt
        self.addedAt = addedAt
        self.updatedAt = updatedAt
        self.duration = duration
        self.size = size
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.libraryItemID = try values.decodeIfPresent(String.self, forKey: "libraryItemId")
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.index = try values.decodeIfPresent(Int.self, forKey: "index")
        self.season = try values.decodeIfPresent(String.self, forKey: "season")
        self.episode = try values.decodeIfPresent(String.self, forKey: "episode")
        self.episodeType = try values.decodeIfPresent(String.self, forKey: "episodeType")
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.subtitle = try values.decodeIfPresent(String.self, forKey: "subtitle")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.enclosure = try values.decodeIfPresent(PodcastEpisodeEnclousure.self, forKey: "enclosure")
        self.pubDate = try values.decodeIfPresent(String.self, forKey: "pubDate")
        self.audioFile = try values.decodeIfPresent(AudioFile.self, forKey: "audioFile")
        self.audioTrack = try values.decodeIfPresent(AudioTrack.self, forKey: "audioTrack")
        self.publishedAt = try values.decodeIfPresent(Int.self, forKey: "publishedAt")
        self.addedAt = try values.decodeIfPresent(Int.self, forKey: "addedAt")
        self.updatedAt = try values.decodeIfPresent(Int.self, forKey: "updatedAt")
        self.duration = try values.decodeIfPresent(Double.self, forKey: "duration")
        self.size = try values.decodeIfPresent(Int.self, forKey: "size")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(libraryItemID, forKey: "libraryItemId")
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(index, forKey: "index")
        try values.encodeIfPresent(season, forKey: "season")
        try values.encodeIfPresent(episode, forKey: "episode")
        try values.encodeIfPresent(episodeType, forKey: "episodeType")
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(subtitle, forKey: "subtitle")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(enclosure, forKey: "enclosure")
        try values.encodeIfPresent(pubDate, forKey: "pubDate")
        try values.encodeIfPresent(audioFile, forKey: "audioFile")
        try values.encodeIfPresent(audioTrack, forKey: "audioTrack")
        try values.encodeIfPresent(publishedAt, forKey: "publishedAt")
        try values.encodeIfPresent(addedAt, forKey: "addedAt")
        try values.encodeIfPresent(updatedAt, forKey: "updatedAt")
        try values.encodeIfPresent(duration, forKey: "duration")
        try values.encodeIfPresent(size, forKey: "size")
    }
}
