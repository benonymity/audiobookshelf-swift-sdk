// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct LibraryFile: Codable {
    /// The inode of the library file.
    public var ino: String?
    public var metadata: FileMetadata?
    /// The time (in ms since POSIX epoch) when the library file was added.
    public var addedAt: Int?
    /// The time (in ms since POSIX epoch) when the library file was last updated.
    public var updatedAt: Int?
    /// The type of file that the library file is (audio, image, etc.).
    public var fileType: String?

    public init(ino: String? = nil, metadata: FileMetadata? = nil, addedAt: Int? = nil, updatedAt: Int? = nil, fileType: String? = nil) {
        self.ino = ino
        self.metadata = metadata
        self.addedAt = addedAt
        self.updatedAt = updatedAt
        self.fileType = fileType
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.ino = try values.decodeIfPresent(String.self, forKey: "ino")
        self.metadata = try values.decodeIfPresent(FileMetadata.self, forKey: "metadata")
        self.addedAt = try values.decodeIfPresent(Int.self, forKey: "addedAt")
        self.updatedAt = try values.decodeIfPresent(Int.self, forKey: "updatedAt")
        self.fileType = try values.decodeIfPresent(String.self, forKey: "fileType")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(ino, forKey: "ino")
        try values.encodeIfPresent(metadata, forKey: "metadata")
        try values.encodeIfPresent(addedAt, forKey: "addedAt")
        try values.encodeIfPresent(updatedAt, forKey: "updatedAt")
        try values.encodeIfPresent(fileType, forKey: "fileType")
    }
}
