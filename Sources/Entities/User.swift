// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct User: Codable {
    /// The ID of the user. Only the root user has the root ID.
    public var id: String?
    /// The username of the user.
    public var username: String?
    /// The type of the user. Will be root, guest, user, or admin. There will be only one root user which is created when the server first starts.
    public var type: String?
    /// The authentication token of the user.
    public var token: String?
    /// The user's media progress.
    public var mediaProgress: [MediaProgress]?
    /// The IDs of series to hide from the user's "Continue Series" shelf.
    public var seriesHideFromContinueListening: [String]?
    /// The user's bookmarks.
    public var bookmarks: [AudioBookmark]?
    /// Whether the user's account is active.
    public var isActive: Bool?
    /// Whether the user is locked.
    public var isLocked: Bool?
    /// The time (in ms since POSIX epoch) when the user was last seen by the server. Will be null if the user has never logged in.
    public var lastSeen: Int?
    /// The time (in ms since POSIX epoch) when the user was created.
    public var createdAt: Int?
    public var permissions: UserPermissions?
    /// The IDs of libraries accessible to the user. An empty array means all libraries are accessible.
    public var librariesAccessible: [String]?
    /// The tags accessible to the user. An empty array means all tags are accessible.
    public var itemTagsAccessible: [String]?

    public init(id: String? = nil, username: String? = nil, type: String? = nil, token: String? = nil, mediaProgress: [MediaProgress]? = nil, seriesHideFromContinueListening: [String]? = nil, bookmarks: [AudioBookmark]? = nil, isActive: Bool? = nil, isLocked: Bool? = nil, lastSeen: Int? = nil, createdAt: Int? = nil, permissions: UserPermissions? = nil, librariesAccessible: [String]? = nil, itemTagsAccessible: [String]? = nil) {
        self.id = id
        self.username = username
        self.type = type
        self.token = token
        self.mediaProgress = mediaProgress
        self.seriesHideFromContinueListening = seriesHideFromContinueListening
        self.bookmarks = bookmarks
        self.isActive = isActive
        self.isLocked = isLocked
        self.lastSeen = lastSeen
        self.createdAt = createdAt
        self.permissions = permissions
        self.librariesAccessible = librariesAccessible
        self.itemTagsAccessible = itemTagsAccessible
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.username = try values.decodeIfPresent(String.self, forKey: "username")
        self.type = try values.decodeIfPresent(String.self, forKey: "type")
        self.token = try values.decodeIfPresent(String.self, forKey: "token")
        self.mediaProgress = try values.decodeIfPresent([MediaProgress].self, forKey: "mediaProgress")
        self.seriesHideFromContinueListening = try values.decodeIfPresent([String].self, forKey: "seriesHideFromContinueListening")
        self.bookmarks = try values.decodeIfPresent([AudioBookmark].self, forKey: "bookmarks")
        self.isActive = try values.decodeIfPresent(Bool.self, forKey: "isActive")
        self.isLocked = try values.decodeIfPresent(Bool.self, forKey: "isLocked")
        self.lastSeen = try values.decodeIfPresent(Int.self, forKey: "lastSeen")
        self.createdAt = try values.decodeIfPresent(Int.self, forKey: "createdAt")
        self.permissions = try values.decodeIfPresent(UserPermissions.self, forKey: "permissions")
        self.librariesAccessible = try values.decodeIfPresent([String].self, forKey: "librariesAccessible")
        self.itemTagsAccessible = try values.decodeIfPresent([String].self, forKey: "itemTagsAccessible")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(username, forKey: "username")
        try values.encodeIfPresent(type, forKey: "type")
        try values.encodeIfPresent(token, forKey: "token")
        try values.encodeIfPresent(mediaProgress, forKey: "mediaProgress")
        try values.encodeIfPresent(seriesHideFromContinueListening, forKey: "seriesHideFromContinueListening")
        try values.encodeIfPresent(bookmarks, forKey: "bookmarks")
        try values.encodeIfPresent(isActive, forKey: "isActive")
        try values.encodeIfPresent(isLocked, forKey: "isLocked")
        try values.encodeIfPresent(lastSeen, forKey: "lastSeen")
        try values.encodeIfPresent(createdAt, forKey: "createdAt")
        try values.encodeIfPresent(permissions, forKey: "permissions")
        try values.encodeIfPresent(librariesAccessible, forKey: "librariesAccessible")
        try values.encodeIfPresent(itemTagsAccessible, forKey: "itemTagsAccessible")
    }
}
