// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct RssFeedMinified: Codable {
    /// The ID of the RSS feed.
    public var id: String?
    /// The type of entity the RSS feed is for.
    public var entityType: String?
    /// The ID of the entity the RSS feed is for.
    public var entityID: String?
    /// The full URL of the RSS feed.
    public var feedURL: String?
    public var meta: RssFeedMetadataMinified?

    public init(id: String? = nil, entityType: String? = nil, entityID: String? = nil, feedURL: String? = nil, meta: RssFeedMetadataMinified? = nil) {
        self.id = id
        self.entityType = entityType
        self.entityID = entityID
        self.feedURL = feedURL
        self.meta = meta
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.entityType = try values.decodeIfPresent(String.self, forKey: "entityType")
        self.entityID = try values.decodeIfPresent(String.self, forKey: "entityId")
        self.feedURL = try values.decodeIfPresent(String.self, forKey: "feedUrl")
        self.meta = try values.decodeIfPresent(RssFeedMetadataMinified.self, forKey: "meta")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(entityType, forKey: "entityType")
        try values.encodeIfPresent(entityID, forKey: "entityId")
        try values.encodeIfPresent(feedURL, forKey: "feedUrl")
        try values.encodeIfPresent(meta, forKey: "meta")
    }
}
