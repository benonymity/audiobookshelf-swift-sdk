// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct Author: Codable {
    /// The ID of the author.
    public var id: String?
    /// The ASIN of the author. Will be null if unknown.
    public var asin: String?
    /// The name of the author.
    public var name: String?
    /// A description of the author. Will be null if there is none.
    public var description: String?
    /// The absolute path for the author image. Will be null if there is no image.
    public var imagePath: String?
    /// The time (in ms since POSIX epoch) when the author was added.
    public var addedAt: Int?
    /// The time (in ms since POSIX epoch) when the author was last updated.
    public var updatedAt: Int?

    public init(id: String? = nil, asin: String? = nil, name: String? = nil, description: String? = nil, imagePath: String? = nil, addedAt: Int? = nil, updatedAt: Int? = nil) {
        self.id = id
        self.asin = asin
        self.name = name
        self.description = description
        self.imagePath = imagePath
        self.addedAt = addedAt
        self.updatedAt = updatedAt
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.id = try values.decodeIfPresent(String.self, forKey: "id")
        self.asin = try values.decodeIfPresent(String.self, forKey: "asin")
        self.name = try values.decodeIfPresent(String.self, forKey: "name")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.imagePath = try values.decodeIfPresent(String.self, forKey: "imagePath")
        self.addedAt = try values.decodeIfPresent(Int.self, forKey: "addedAt")
        self.updatedAt = try values.decodeIfPresent(Int.self, forKey: "updatedAt")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(id, forKey: "id")
        try values.encodeIfPresent(asin, forKey: "asin")
        try values.encodeIfPresent(name, forKey: "name")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(imagePath, forKey: "imagePath")
        try values.encodeIfPresent(addedAt, forKey: "addedAt")
        try values.encodeIfPresent(updatedAt, forKey: "updatedAt")
    }
}
