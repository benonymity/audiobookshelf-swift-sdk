// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct PodcastFeedMetadata: Codable {
    /// A URL for the podcast's cover image.
    public var image: String?
    /// The podcast's categories. Can be similar to genres.
    public var categories: [String]?
    /// A URL of an RSS feed for the podcast.
    public var feedURL: String?
    /// A HTML encoded description of the podcast.
    public var description: String?
    /// A plain text description of the podcast.
    public var descriptionPlain: String?
    /// The podcast's title.
    public var title: String?
    /// The podcast's language.
    public var language: String?
    /// Whether the podcast is explicit. Will probably be "true" or "false".
    public var explicit: String?
    /// The podcast's author.
    public var author: String?
    /// The podcast's publication date.
    public var pubDate: String?
    /// A URL the RSS feed provided for possible display to the user.
    public var link: String?

    public init(image: String? = nil, categories: [String]? = nil, feedURL: String? = nil, description: String? = nil, descriptionPlain: String? = nil, title: String? = nil, language: String? = nil, explicit: String? = nil, author: String? = nil, pubDate: String? = nil, link: String? = nil) {
        self.image = image
        self.categories = categories
        self.feedURL = feedURL
        self.description = description
        self.descriptionPlain = descriptionPlain
        self.title = title
        self.language = language
        self.explicit = explicit
        self.author = author
        self.pubDate = pubDate
        self.link = link
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.image = try values.decodeIfPresent(String.self, forKey: "image")
        self.categories = try values.decodeIfPresent([String].self, forKey: "categories")
        self.feedURL = try values.decodeIfPresent(String.self, forKey: "feedUrl")
        self.description = try values.decodeIfPresent(String.self, forKey: "description")
        self.descriptionPlain = try values.decodeIfPresent(String.self, forKey: "descriptionPlain")
        self.title = try values.decodeIfPresent(String.self, forKey: "title")
        self.language = try values.decodeIfPresent(String.self, forKey: "language")
        self.explicit = try values.decodeIfPresent(String.self, forKey: "explicit")
        self.author = try values.decodeIfPresent(String.self, forKey: "author")
        self.pubDate = try values.decodeIfPresent(String.self, forKey: "pubDate")
        self.link = try values.decodeIfPresent(String.self, forKey: "link")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(image, forKey: "image")
        try values.encodeIfPresent(categories, forKey: "categories")
        try values.encodeIfPresent(feedURL, forKey: "feedUrl")
        try values.encodeIfPresent(description, forKey: "description")
        try values.encodeIfPresent(descriptionPlain, forKey: "descriptionPlain")
        try values.encodeIfPresent(title, forKey: "title")
        try values.encodeIfPresent(language, forKey: "language")
        try values.encodeIfPresent(explicit, forKey: "explicit")
        try values.encodeIfPresent(author, forKey: "author")
        try values.encodeIfPresent(pubDate, forKey: "pubDate")
        try values.encodeIfPresent(link, forKey: "link")
    }
}
