// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import NaiveDate

public struct UserPermissions: Codable {
    /// Whether the user can download items to the server.
    public var isDownload: Bool?
    /// Whether the user can update library items.
    public var isUpdate: Bool?
    /// Whether the user can delete library items.
    public var delete: Bool?
    /// Whether the user can upload items to the server.
    public var isUpload: Bool?
    /// Whether the user can access all libraries.
    public var isAccessAllLibraries: Bool?
    /// Whether the user can access all tags.
    public var isAccessAllTags: Bool?
    /// Whether the user can access explicit content.
    public var isAccessExplicitContent: Bool?

    public init(isDownload: Bool? = nil, isUpdate: Bool? = nil, delete: Bool? = nil, isUpload: Bool? = nil, isAccessAllLibraries: Bool? = nil, isAccessAllTags: Bool? = nil, isAccessExplicitContent: Bool? = nil) {
        self.isDownload = isDownload
        self.isUpdate = isUpdate
        self.delete = delete
        self.isUpload = isUpload
        self.isAccessAllLibraries = isAccessAllLibraries
        self.isAccessAllTags = isAccessAllTags
        self.isAccessExplicitContent = isAccessExplicitContent
    }

    public init(from decoder: Decoder) throws {
        let values = try decoder.container(keyedBy: StringCodingKey.self)
        self.isDownload = try values.decodeIfPresent(Bool.self, forKey: "download")
        self.isUpdate = try values.decodeIfPresent(Bool.self, forKey: "update")
        self.delete = try values.decodeIfPresent(Bool.self, forKey: "delete")
        self.isUpload = try values.decodeIfPresent(Bool.self, forKey: "upload")
        self.isAccessAllLibraries = try values.decodeIfPresent(Bool.self, forKey: "accessAllLibraries")
        self.isAccessAllTags = try values.decodeIfPresent(Bool.self, forKey: "accessAllTags")
        self.isAccessExplicitContent = try values.decodeIfPresent(Bool.self, forKey: "accessExplicitContent")
    }

    public func encode(to encoder: Encoder) throws {
        var values = encoder.container(keyedBy: StringCodingKey.self)
        try values.encodeIfPresent(isDownload, forKey: "download")
        try values.encodeIfPresent(isUpdate, forKey: "update")
        try values.encodeIfPresent(delete, forKey: "delete")
        try values.encodeIfPresent(isUpload, forKey: "upload")
        try values.encodeIfPresent(isAccessAllLibraries, forKey: "accessAllLibraries")
        try values.encodeIfPresent(isAccessAllTags, forKey: "accessAllTags")
        try values.encodeIfPresent(isAccessExplicitContent, forKey: "accessExplicitContent")
    }
}
